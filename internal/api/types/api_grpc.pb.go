// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api.proto

package grpc

import (
	context "context"
	types "github.com/EduardMikhrin/territorial-fishermans/internal/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FishermanService_SubmitApplication_FullMethodName         = "/api.FishermanService/SubmitApplication"
	FishermanService_UpdateApplication_FullMethodName         = "/api.FishermanService/UpdateApplication"
	FishermanService_DeleteApplication_FullMethodName         = "/api.FishermanService/DeleteApplication"
	FishermanService_GetAllApplications_FullMethodName        = "/api.FishermanService/GetAllApplications"
	FishermanService_GetApplicationById_FullMethodName        = "/api.FishermanService/GetApplicationById"
	FishermanService_SubmitClient_FullMethodName              = "/api.FishermanService/SubmitClient"
	FishermanService_UpdateClient_FullMethodName              = "/api.FishermanService/UpdateClient"
	FishermanService_DeleteClient_FullMethodName              = "/api.FishermanService/DeleteClient"
	FishermanService_GetAllClients_FullMethodName             = "/api.FishermanService/GetAllClients"
	FishermanService_GetClientById_FullMethodName             = "/api.FishermanService/GetClientById"
	FishermanService_SubmitLocation_FullMethodName            = "/api.FishermanService/SubmitLocation"
	FishermanService_UpdateLocation_FullMethodName            = "/api.FishermanService/UpdateLocation"
	FishermanService_DeleteLocation_FullMethodName            = "/api.FishermanService/DeleteLocation"
	FishermanService_GetAllLocations_FullMethodName           = "/api.FishermanService/GetAllLocations"
	FishermanService_GetLocationById_FullMethodName           = "/api.FishermanService/GetLocationById"
	FishermanService_SubmitApplicationStatus_FullMethodName   = "/api.FishermanService/SubmitApplicationStatus"
	FishermanService_UpdateApplicationStatus_FullMethodName   = "/api.FishermanService/UpdateApplicationStatus"
	FishermanService_DeleteApplicationStatus_FullMethodName   = "/api.FishermanService/DeleteApplicationStatus"
	FishermanService_GetApplicationStatus_FullMethodName      = "/api.FishermanService/GetApplicationStatus"
	FishermanService_GetAllApplicationStatuses_FullMethodName = "/api.FishermanService/GetAllApplicationStatuses"
)

// FishermanServiceClient is the client API for FishermanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FishermanServiceClient interface {
	SubmitApplication(ctx context.Context, in *types.SubmitApplicationRequest, opts ...grpc.CallOption) (*types.SubmitApplicationResponse, error)
	UpdateApplication(ctx context.Context, in *types.UpdateApplicationRequest, opts ...grpc.CallOption) (*types.UpdateApplicationResponse, error)
	DeleteApplication(ctx context.Context, in *types.DeleteApplicationRequest, opts ...grpc.CallOption) (*types.DeleteApplicationResponse, error)
	GetAllApplications(ctx context.Context, in *types.ListApplicationsRequest, opts ...grpc.CallOption) (*types.ListApplicationsResponse, error)
	GetApplicationById(ctx context.Context, in *types.GetApplicationByIdRequest, opts ...grpc.CallOption) (*types.GetApplicationByIdResponse, error)
	SubmitClient(ctx context.Context, in *types.SubmitClientRequest, opts ...grpc.CallOption) (*types.SubmitClientResponse, error)
	UpdateClient(ctx context.Context, in *types.UpdateClientRequest, opts ...grpc.CallOption) (*types.UpdateClientResponse, error)
	DeleteClient(ctx context.Context, in *types.DeleteClientRequest, opts ...grpc.CallOption) (*types.DeleteClientResponse, error)
	GetAllClients(ctx context.Context, in *types.GetAllClientsRequest, opts ...grpc.CallOption) (*types.GetAllClientsResponse, error)
	GetClientById(ctx context.Context, in *types.GetClientByIdRequest, opts ...grpc.CallOption) (*types.GetClientByIdResponse, error)
	SubmitLocation(ctx context.Context, in *types.SubmitLocationRequest, opts ...grpc.CallOption) (*types.SubmitLocationResponse, error)
	UpdateLocation(ctx context.Context, in *types.UpdateLocationRequest, opts ...grpc.CallOption) (*types.UpdateLocationResponse, error)
	DeleteLocation(ctx context.Context, in *types.DeleteLocationRequest, opts ...grpc.CallOption) (*types.DeleteLocationResponse, error)
	GetAllLocations(ctx context.Context, in *types.GetAllLocationsRequest, opts ...grpc.CallOption) (*types.GetAllLocationsResponse, error)
	GetLocationById(ctx context.Context, in *types.GetLocationByIdRequest, opts ...grpc.CallOption) (*types.GetLocationByIdResponse, error)
	SubmitApplicationStatus(ctx context.Context, in *types.SubmitApplicationStatusRequest, opts ...grpc.CallOption) (*types.SubmitApplicationStatusResponse, error)
	UpdateApplicationStatus(ctx context.Context, in *types.UpdateApplicationStatusRequest, opts ...grpc.CallOption) (*types.UpdateApplicationStatusResponse, error)
	DeleteApplicationStatus(ctx context.Context, in *types.DeleteApplicationStatusRequest, opts ...grpc.CallOption) (*types.DeleteApplicationStatusResponse, error)
	GetApplicationStatus(ctx context.Context, in *types.GetApplicationStatusRequest, opts ...grpc.CallOption) (*types.GetApplicationStatusResponse, error)
	GetAllApplicationStatuses(ctx context.Context, in *types.GetAllApplicationsStatusRequest, opts ...grpc.CallOption) (*types.GetAllApplicationsStatusResponse, error)
}

type fishermanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFishermanServiceClient(cc grpc.ClientConnInterface) FishermanServiceClient {
	return &fishermanServiceClient{cc}
}

func (c *fishermanServiceClient) SubmitApplication(ctx context.Context, in *types.SubmitApplicationRequest, opts ...grpc.CallOption) (*types.SubmitApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SubmitApplicationResponse)
	err := c.cc.Invoke(ctx, FishermanService_SubmitApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) UpdateApplication(ctx context.Context, in *types.UpdateApplicationRequest, opts ...grpc.CallOption) (*types.UpdateApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, FishermanService_UpdateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) DeleteApplication(ctx context.Context, in *types.DeleteApplicationRequest, opts ...grpc.CallOption) (*types.DeleteApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, FishermanService_DeleteApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetAllApplications(ctx context.Context, in *types.ListApplicationsRequest, opts ...grpc.CallOption) (*types.ListApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ListApplicationsResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetAllApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetApplicationById(ctx context.Context, in *types.GetApplicationByIdRequest, opts ...grpc.CallOption) (*types.GetApplicationByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetApplicationByIdResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetApplicationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) SubmitClient(ctx context.Context, in *types.SubmitClientRequest, opts ...grpc.CallOption) (*types.SubmitClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SubmitClientResponse)
	err := c.cc.Invoke(ctx, FishermanService_SubmitClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) UpdateClient(ctx context.Context, in *types.UpdateClientRequest, opts ...grpc.CallOption) (*types.UpdateClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UpdateClientResponse)
	err := c.cc.Invoke(ctx, FishermanService_UpdateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) DeleteClient(ctx context.Context, in *types.DeleteClientRequest, opts ...grpc.CallOption) (*types.DeleteClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DeleteClientResponse)
	err := c.cc.Invoke(ctx, FishermanService_DeleteClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetAllClients(ctx context.Context, in *types.GetAllClientsRequest, opts ...grpc.CallOption) (*types.GetAllClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetAllClientsResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetAllClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetClientById(ctx context.Context, in *types.GetClientByIdRequest, opts ...grpc.CallOption) (*types.GetClientByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetClientByIdResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetClientById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) SubmitLocation(ctx context.Context, in *types.SubmitLocationRequest, opts ...grpc.CallOption) (*types.SubmitLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SubmitLocationResponse)
	err := c.cc.Invoke(ctx, FishermanService_SubmitLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) UpdateLocation(ctx context.Context, in *types.UpdateLocationRequest, opts ...grpc.CallOption) (*types.UpdateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UpdateLocationResponse)
	err := c.cc.Invoke(ctx, FishermanService_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) DeleteLocation(ctx context.Context, in *types.DeleteLocationRequest, opts ...grpc.CallOption) (*types.DeleteLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DeleteLocationResponse)
	err := c.cc.Invoke(ctx, FishermanService_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetAllLocations(ctx context.Context, in *types.GetAllLocationsRequest, opts ...grpc.CallOption) (*types.GetAllLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetAllLocationsResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetAllLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetLocationById(ctx context.Context, in *types.GetLocationByIdRequest, opts ...grpc.CallOption) (*types.GetLocationByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetLocationByIdResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetLocationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) SubmitApplicationStatus(ctx context.Context, in *types.SubmitApplicationStatusRequest, opts ...grpc.CallOption) (*types.SubmitApplicationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SubmitApplicationStatusResponse)
	err := c.cc.Invoke(ctx, FishermanService_SubmitApplicationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) UpdateApplicationStatus(ctx context.Context, in *types.UpdateApplicationStatusRequest, opts ...grpc.CallOption) (*types.UpdateApplicationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UpdateApplicationStatusResponse)
	err := c.cc.Invoke(ctx, FishermanService_UpdateApplicationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) DeleteApplicationStatus(ctx context.Context, in *types.DeleteApplicationStatusRequest, opts ...grpc.CallOption) (*types.DeleteApplicationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DeleteApplicationStatusResponse)
	err := c.cc.Invoke(ctx, FishermanService_DeleteApplicationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetApplicationStatus(ctx context.Context, in *types.GetApplicationStatusRequest, opts ...grpc.CallOption) (*types.GetApplicationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetApplicationStatusResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetApplicationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishermanServiceClient) GetAllApplicationStatuses(ctx context.Context, in *types.GetAllApplicationsStatusRequest, opts ...grpc.CallOption) (*types.GetAllApplicationsStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GetAllApplicationsStatusResponse)
	err := c.cc.Invoke(ctx, FishermanService_GetAllApplicationStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FishermanServiceServer is the server API for FishermanService service.
// All implementations should embed UnimplementedFishermanServiceServer
// for forward compatibility.
type FishermanServiceServer interface {
	SubmitApplication(context.Context, *types.SubmitApplicationRequest) (*types.SubmitApplicationResponse, error)
	UpdateApplication(context.Context, *types.UpdateApplicationRequest) (*types.UpdateApplicationResponse, error)
	DeleteApplication(context.Context, *types.DeleteApplicationRequest) (*types.DeleteApplicationResponse, error)
	GetAllApplications(context.Context, *types.ListApplicationsRequest) (*types.ListApplicationsResponse, error)
	GetApplicationById(context.Context, *types.GetApplicationByIdRequest) (*types.GetApplicationByIdResponse, error)
	SubmitClient(context.Context, *types.SubmitClientRequest) (*types.SubmitClientResponse, error)
	UpdateClient(context.Context, *types.UpdateClientRequest) (*types.UpdateClientResponse, error)
	DeleteClient(context.Context, *types.DeleteClientRequest) (*types.DeleteClientResponse, error)
	GetAllClients(context.Context, *types.GetAllClientsRequest) (*types.GetAllClientsResponse, error)
	GetClientById(context.Context, *types.GetClientByIdRequest) (*types.GetClientByIdResponse, error)
	SubmitLocation(context.Context, *types.SubmitLocationRequest) (*types.SubmitLocationResponse, error)
	UpdateLocation(context.Context, *types.UpdateLocationRequest) (*types.UpdateLocationResponse, error)
	DeleteLocation(context.Context, *types.DeleteLocationRequest) (*types.DeleteLocationResponse, error)
	GetAllLocations(context.Context, *types.GetAllLocationsRequest) (*types.GetAllLocationsResponse, error)
	GetLocationById(context.Context, *types.GetLocationByIdRequest) (*types.GetLocationByIdResponse, error)
	SubmitApplicationStatus(context.Context, *types.SubmitApplicationStatusRequest) (*types.SubmitApplicationStatusResponse, error)
	UpdateApplicationStatus(context.Context, *types.UpdateApplicationStatusRequest) (*types.UpdateApplicationStatusResponse, error)
	DeleteApplicationStatus(context.Context, *types.DeleteApplicationStatusRequest) (*types.DeleteApplicationStatusResponse, error)
	GetApplicationStatus(context.Context, *types.GetApplicationStatusRequest) (*types.GetApplicationStatusResponse, error)
	GetAllApplicationStatuses(context.Context, *types.GetAllApplicationsStatusRequest) (*types.GetAllApplicationsStatusResponse, error)
}

// UnimplementedFishermanServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFishermanServiceServer struct{}

func (UnimplementedFishermanServiceServer) SubmitApplication(context.Context, *types.SubmitApplicationRequest) (*types.SubmitApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitApplication not implemented")
}
func (UnimplementedFishermanServiceServer) UpdateApplication(context.Context, *types.UpdateApplicationRequest) (*types.UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedFishermanServiceServer) DeleteApplication(context.Context, *types.DeleteApplicationRequest) (*types.DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedFishermanServiceServer) GetAllApplications(context.Context, *types.ListApplicationsRequest) (*types.ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllApplications not implemented")
}
func (UnimplementedFishermanServiceServer) GetApplicationById(context.Context, *types.GetApplicationByIdRequest) (*types.GetApplicationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationById not implemented")
}
func (UnimplementedFishermanServiceServer) SubmitClient(context.Context, *types.SubmitClientRequest) (*types.SubmitClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitClient not implemented")
}
func (UnimplementedFishermanServiceServer) UpdateClient(context.Context, *types.UpdateClientRequest) (*types.UpdateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedFishermanServiceServer) DeleteClient(context.Context, *types.DeleteClientRequest) (*types.DeleteClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedFishermanServiceServer) GetAllClients(context.Context, *types.GetAllClientsRequest) (*types.GetAllClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClients not implemented")
}
func (UnimplementedFishermanServiceServer) GetClientById(context.Context, *types.GetClientByIdRequest) (*types.GetClientByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientById not implemented")
}
func (UnimplementedFishermanServiceServer) SubmitLocation(context.Context, *types.SubmitLocationRequest) (*types.SubmitLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitLocation not implemented")
}
func (UnimplementedFishermanServiceServer) UpdateLocation(context.Context, *types.UpdateLocationRequest) (*types.UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedFishermanServiceServer) DeleteLocation(context.Context, *types.DeleteLocationRequest) (*types.DeleteLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedFishermanServiceServer) GetAllLocations(context.Context, *types.GetAllLocationsRequest) (*types.GetAllLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLocations not implemented")
}
func (UnimplementedFishermanServiceServer) GetLocationById(context.Context, *types.GetLocationByIdRequest) (*types.GetLocationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationById not implemented")
}
func (UnimplementedFishermanServiceServer) SubmitApplicationStatus(context.Context, *types.SubmitApplicationStatusRequest) (*types.SubmitApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitApplicationStatus not implemented")
}
func (UnimplementedFishermanServiceServer) UpdateApplicationStatus(context.Context, *types.UpdateApplicationStatusRequest) (*types.UpdateApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationStatus not implemented")
}
func (UnimplementedFishermanServiceServer) DeleteApplicationStatus(context.Context, *types.DeleteApplicationStatusRequest) (*types.DeleteApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationStatus not implemented")
}
func (UnimplementedFishermanServiceServer) GetApplicationStatus(context.Context, *types.GetApplicationStatusRequest) (*types.GetApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationStatus not implemented")
}
func (UnimplementedFishermanServiceServer) GetAllApplicationStatuses(context.Context, *types.GetAllApplicationsStatusRequest) (*types.GetAllApplicationsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllApplicationStatuses not implemented")
}
func (UnimplementedFishermanServiceServer) testEmbeddedByValue() {}

// UnsafeFishermanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FishermanServiceServer will
// result in compilation errors.
type UnsafeFishermanServiceServer interface {
	mustEmbedUnimplementedFishermanServiceServer()
}

func RegisterFishermanServiceServer(s grpc.ServiceRegistrar, srv FishermanServiceServer) {
	// If the following call pancis, it indicates UnimplementedFishermanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FishermanService_ServiceDesc, srv)
}

func _FishermanService_SubmitApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmitApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).SubmitApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_SubmitApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).SubmitApplication(ctx, req.(*types.SubmitApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).UpdateApplication(ctx, req.(*types.UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).DeleteApplication(ctx, req.(*types.DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetAllApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetAllApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetAllApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetAllApplications(ctx, req.(*types.ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetApplicationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetApplicationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetApplicationById(ctx, req.(*types.GetApplicationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_SubmitClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmitClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).SubmitClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_SubmitClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).SubmitClient(ctx, req.(*types.SubmitClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).UpdateClient(ctx, req.(*types.UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).DeleteClient(ctx, req.(*types.DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetAllClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetAllClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetAllClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetAllClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetAllClients(ctx, req.(*types.GetAllClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetClientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetClientByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetClientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetClientById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetClientById(ctx, req.(*types.GetClientByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_SubmitLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmitLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).SubmitLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_SubmitLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).SubmitLocation(ctx, req.(*types.SubmitLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).UpdateLocation(ctx, req.(*types.UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DeleteLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).DeleteLocation(ctx, req.(*types.DeleteLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetAllLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetAllLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetAllLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetAllLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetAllLocations(ctx, req.(*types.GetAllLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetLocationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetLocationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetLocationById(ctx, req.(*types.GetLocationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_SubmitApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmitApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).SubmitApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_SubmitApplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).SubmitApplicationStatus(ctx, req.(*types.SubmitApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_UpdateApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).UpdateApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_UpdateApplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).UpdateApplicationStatus(ctx, req.(*types.UpdateApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_DeleteApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DeleteApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).DeleteApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_DeleteApplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).DeleteApplicationStatus(ctx, req.(*types.DeleteApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetApplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetApplicationStatus(ctx, req.(*types.GetApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FishermanService_GetAllApplicationStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetAllApplicationsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishermanServiceServer).GetAllApplicationStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FishermanService_GetAllApplicationStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishermanServiceServer).GetAllApplicationStatuses(ctx, req.(*types.GetAllApplicationsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FishermanService_ServiceDesc is the grpc.ServiceDesc for FishermanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FishermanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FishermanService",
	HandlerType: (*FishermanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitApplication",
			Handler:    _FishermanService_SubmitApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _FishermanService_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _FishermanService_DeleteApplication_Handler,
		},
		{
			MethodName: "GetAllApplications",
			Handler:    _FishermanService_GetAllApplications_Handler,
		},
		{
			MethodName: "GetApplicationById",
			Handler:    _FishermanService_GetApplicationById_Handler,
		},
		{
			MethodName: "SubmitClient",
			Handler:    _FishermanService_SubmitClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _FishermanService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _FishermanService_DeleteClient_Handler,
		},
		{
			MethodName: "GetAllClients",
			Handler:    _FishermanService_GetAllClients_Handler,
		},
		{
			MethodName: "GetClientById",
			Handler:    _FishermanService_GetClientById_Handler,
		},
		{
			MethodName: "SubmitLocation",
			Handler:    _FishermanService_SubmitLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _FishermanService_UpdateLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _FishermanService_DeleteLocation_Handler,
		},
		{
			MethodName: "GetAllLocations",
			Handler:    _FishermanService_GetAllLocations_Handler,
		},
		{
			MethodName: "GetLocationById",
			Handler:    _FishermanService_GetLocationById_Handler,
		},
		{
			MethodName: "SubmitApplicationStatus",
			Handler:    _FishermanService_SubmitApplicationStatus_Handler,
		},
		{
			MethodName: "UpdateApplicationStatus",
			Handler:    _FishermanService_UpdateApplicationStatus_Handler,
		},
		{
			MethodName: "DeleteApplicationStatus",
			Handler:    _FishermanService_DeleteApplicationStatus_Handler,
		},
		{
			MethodName: "GetApplicationStatus",
			Handler:    _FishermanService_GetApplicationStatus_Handler,
		},
		{
			MethodName: "GetAllApplicationStatuses",
			Handler:    _FishermanService_GetAllApplicationStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
